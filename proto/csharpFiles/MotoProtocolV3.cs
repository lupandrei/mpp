// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MotoProtocol_v3.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Chat.Protocol {

  /// <summary>Holder for reflection information generated from MotoProtocol_v3.proto</summary>
  public static partial class MotoProtocolV3Reflection {

    #region Descriptor
    /// <summary>File descriptor for MotoProtocol_v3.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MotoProtocolV3Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVNb3RvUHJvdG9jb2xfdjMucHJvdG8SDWNoYXQucHJvdG9jb2wiJAoEVXNl",
            "chIKCgJpZBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSIuCgVFbnRyeRIOCgZp",
            "ZHJhY2UYASABKAUSFQoNaWRwYXJ0aWNpcGFudBgCIAEoBSJQCgtQYXJ0aWNp",
            "cGFudBIKCgJpZBgBIAEoBRIRCglmaXJzdG5hbWUYAiABKAkSEAoIbGFzdG5h",
            "bWUYAyABKAkSEAoIdGVhbW5hbWUYBCABKAkiOAoEUmFjZRIKCgJpZBgBIAEo",
            "BRIWCg5lbmdpbmVjYXBhY2l0eRgCIAEoBRIMCgRuYW1lGAMgASgJIkkKB1Jh",
            "Y2VEVE8SEAoIcmFjZW5hbWUYASABKAkSFgoOZW5naW5lY2FwYWNpdHkYAiAB",
            "KAUSFAoMcGFydGljaXBhbnRzGAMgASgFIk0KDlBhcnRpY2lwYW50RFRPEhEK",
            "CWZpcnN0bmFtZRgBIAEoCRIQCghsYXN0bmFtZRgCIAEoCRIWCg5lbmdpbmVj",
            "YXBhY2l0eRgDIAEoBSL3AwoLTW90b1JlcXVlc3QSLQoEdHlwZRgBIAEoDjIf",
            "LmNoYXQucHJvdG9jb2wuTW90b1JlcXVlc3QuVHlwZRIjCgR1c2VyGAIgASgL",
            "MhMuY2hhdC5wcm90b2NvbC5Vc2VySAASEgoIdGVhbW5hbWUYAyABKAlIABIY",
            "Cg5lbmdpbmVjYXBhY2l0eRgEIAEoBUgAEjEKC3BhcnRpY2lwYW50GAUgASgL",
            "MhouY2hhdC5wcm90b2NvbC5QYXJ0aWNpcGFudEgAEiUKBWVudHJ5GAYgASgL",
            "MhQuY2hhdC5wcm90b2NvbC5FbnRyeUgAIoACCgRUeXBlEgsKB1Vua25vd24Q",
            "ABIJCgVMb2dpbhABEgoKBkxvZ291dBACEiIKHkdldFJhY2VFbnRyaWVzQnlF",
            "bmdpbmVDYXBhY2l0eRADEicKI0dldFBhcnRpY2lwYW50TmFtZUFuZEVuZ2lu",
            "ZUNhcGFjaXR5EAQSEwoPR2V0QWxsVGVhbU5hbWVzEAUSGgoWR2V0QWxsRW5n",
            "aW5lQ2FwYWNpdGllcxAGEhwKGEZpbmRSYWNlQnlFbmdpbmVDYXBhY2l0eRAH",
            "EhYKEkdldExhc3RQYXJ0aWNpcGFudBAIEhIKDkFkZFBhcnRpY2lwYW50EAkS",
            "DAoIQWRkRW50cnkQCkIJCgdwYXlsb2FkIocECgxNb3RvUmVzcG9uc2USLgoE",
            "dHlwZRgBIAEoDjIgLmNoYXQucHJvdG9jb2wuTW90b1Jlc3BvbnNlLlR5cGUS",
            "DQoFZXJyb3IYAiABKAkSJQoFcmFjZXMYAyADKAsyFi5jaGF0LnByb3RvY29s",
            "LlJhY2VEVE8SMwoMcGFydGljaXBhbnRzGAQgAygLMh0uY2hhdC5wcm90b2Nv",
            "bC5QYXJ0aWNpcGFudERUTxIRCgl0ZWFtbmFtZXMYBSADKAkSGAoQZW5naW5l",
            "Y2FwYWNpdGllcxgGIAMoBRIhCgRyYWNlGAcgASgLMhMuY2hhdC5wcm90b2Nv",
            "bC5SYWNlEi8KC3BhcnRpY2lwYW50GAggASgLMhouY2hhdC5wcm90b2NvbC5Q",
            "YXJ0aWNpcGFudCLaAQoEVHlwZRILCgdVbmtub3duEAASBgoCT2sQARIJCgVF",
            "cnJvchACEiIKHkdldFJhY2VFbnRyaWVzQnlFbmdpbmVDYXBhY2l0eRADEicK",
            "I0dldFBhcnRpY2lwYW50TmFtZUFuZEVuZ2luZUNhcGFjaXR5EAQSEwoPR2V0",
            "QWxsVGVhbU5hbWVzEAUSGgoWR2V0QWxsRW5naW5lQ2FwYWNpdGllcxAGEhwK",
            "GEZpbmRSYWNlQnlFbmdpbmVDYXBhY2l0eRAHEhYKEkdldExhc3RQYXJ0aWNp",
            "cGFudBAIQi4KHWNvbS5leGFtcGxlLnByb3RvYnVmZnByb3RvY29sQg1Nb3Rv",
            "UHJvdG9idWZzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Protocol.User), global::Chat.Protocol.User.Parser, new[]{ "Id", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Protocol.Entry), global::Chat.Protocol.Entry.Parser, new[]{ "Idrace", "Idparticipant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Protocol.Participant), global::Chat.Protocol.Participant.Parser, new[]{ "Id", "Firstname", "Lastname", "Teamname" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Protocol.Race), global::Chat.Protocol.Race.Parser, new[]{ "Id", "Enginecapacity", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Protocol.RaceDTO), global::Chat.Protocol.RaceDTO.Parser, new[]{ "Racename", "Enginecapacity", "Participants" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Protocol.ParticipantDTO), global::Chat.Protocol.ParticipantDTO.Parser, new[]{ "Firstname", "Lastname", "Enginecapacity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Protocol.MotoRequest), global::Chat.Protocol.MotoRequest.Parser, new[]{ "Type", "User", "Teamname", "Enginecapacity", "Participant", "Entry" }, new[]{ "Payload" }, new[]{ typeof(global::Chat.Protocol.MotoRequest.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Protocol.MotoResponse), global::Chat.Protocol.MotoResponse.Parser, new[]{ "Type", "Error", "Races", "Participants", "Teamnames", "Enginecapacities", "Race", "Participant" }, null, new[]{ typeof(global::Chat.Protocol.MotoResponse.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Protocol.MotoProtocolV3Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Entry : pb::IMessage<Entry> {
    private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Protocol.MotoProtocolV3Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry(Entry other) : this() {
      idrace_ = other.idrace_;
      idparticipant_ = other.idparticipant_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry Clone() {
      return new Entry(this);
    }

    /// <summary>Field number for the "idrace" field.</summary>
    public const int IdraceFieldNumber = 1;
    private int idrace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idrace {
      get { return idrace_; }
      set {
        idrace_ = value;
      }
    }

    /// <summary>Field number for the "idparticipant" field.</summary>
    public const int IdparticipantFieldNumber = 2;
    private int idparticipant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idparticipant {
      get { return idparticipant_; }
      set {
        idparticipant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idrace != other.Idrace) return false;
      if (Idparticipant != other.Idparticipant) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idrace != 0) hash ^= Idrace.GetHashCode();
      if (Idparticipant != 0) hash ^= Idparticipant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idrace != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Idrace);
      }
      if (Idparticipant != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Idparticipant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idrace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idrace);
      }
      if (Idparticipant != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idparticipant);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entry other) {
      if (other == null) {
        return;
      }
      if (other.Idrace != 0) {
        Idrace = other.Idrace;
      }
      if (other.Idparticipant != 0) {
        Idparticipant = other.Idparticipant;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idrace = input.ReadInt32();
            break;
          }
          case 16: {
            Idparticipant = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Participant : pb::IMessage<Participant> {
    private static readonly pb::MessageParser<Participant> _parser = new pb::MessageParser<Participant>(() => new Participant());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Participant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Protocol.MotoProtocolV3Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Participant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Participant(Participant other) : this() {
      id_ = other.id_;
      firstname_ = other.firstname_;
      lastname_ = other.lastname_;
      teamname_ = other.teamname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Participant Clone() {
      return new Participant(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "firstname" field.</summary>
    public const int FirstnameFieldNumber = 2;
    private string firstname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Firstname {
      get { return firstname_; }
      set {
        firstname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastname" field.</summary>
    public const int LastnameFieldNumber = 3;
    private string lastname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lastname {
      get { return lastname_; }
      set {
        lastname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamname" field.</summary>
    public const int TeamnameFieldNumber = 4;
    private string teamname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Teamname {
      get { return teamname_; }
      set {
        teamname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Participant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Participant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Firstname != other.Firstname) return false;
      if (Lastname != other.Lastname) return false;
      if (Teamname != other.Teamname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Firstname.Length != 0) hash ^= Firstname.GetHashCode();
      if (Lastname.Length != 0) hash ^= Lastname.GetHashCode();
      if (Teamname.Length != 0) hash ^= Teamname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Firstname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Firstname);
      }
      if (Lastname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Lastname);
      }
      if (Teamname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Teamname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Firstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firstname);
      }
      if (Lastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lastname);
      }
      if (Teamname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Teamname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Participant other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Firstname.Length != 0) {
        Firstname = other.Firstname;
      }
      if (other.Lastname.Length != 0) {
        Lastname = other.Lastname;
      }
      if (other.Teamname.Length != 0) {
        Teamname = other.Teamname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Firstname = input.ReadString();
            break;
          }
          case 26: {
            Lastname = input.ReadString();
            break;
          }
          case 34: {
            Teamname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Race : pb::IMessage<Race> {
    private static readonly pb::MessageParser<Race> _parser = new pb::MessageParser<Race>(() => new Race());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Race> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Protocol.MotoProtocolV3Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Race() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Race(Race other) : this() {
      id_ = other.id_;
      enginecapacity_ = other.enginecapacity_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Race Clone() {
      return new Race(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "enginecapacity" field.</summary>
    public const int EnginecapacityFieldNumber = 2;
    private int enginecapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Enginecapacity {
      get { return enginecapacity_; }
      set {
        enginecapacity_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Race);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Race other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Enginecapacity != other.Enginecapacity) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Enginecapacity != 0) hash ^= Enginecapacity.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Enginecapacity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Enginecapacity);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Enginecapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Enginecapacity);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Race other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Enginecapacity != 0) {
        Enginecapacity = other.Enginecapacity;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Enginecapacity = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RaceDTO : pb::IMessage<RaceDTO> {
    private static readonly pb::MessageParser<RaceDTO> _parser = new pb::MessageParser<RaceDTO>(() => new RaceDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaceDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Protocol.MotoProtocolV3Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceDTO(RaceDTO other) : this() {
      racename_ = other.racename_;
      enginecapacity_ = other.enginecapacity_;
      participants_ = other.participants_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceDTO Clone() {
      return new RaceDTO(this);
    }

    /// <summary>Field number for the "racename" field.</summary>
    public const int RacenameFieldNumber = 1;
    private string racename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Racename {
      get { return racename_; }
      set {
        racename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enginecapacity" field.</summary>
    public const int EnginecapacityFieldNumber = 2;
    private int enginecapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Enginecapacity {
      get { return enginecapacity_; }
      set {
        enginecapacity_ = value;
      }
    }

    /// <summary>Field number for the "participants" field.</summary>
    public const int ParticipantsFieldNumber = 3;
    private int participants_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Participants {
      get { return participants_; }
      set {
        participants_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaceDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaceDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Racename != other.Racename) return false;
      if (Enginecapacity != other.Enginecapacity) return false;
      if (Participants != other.Participants) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Racename.Length != 0) hash ^= Racename.GetHashCode();
      if (Enginecapacity != 0) hash ^= Enginecapacity.GetHashCode();
      if (Participants != 0) hash ^= Participants.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Racename.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Racename);
      }
      if (Enginecapacity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Enginecapacity);
      }
      if (Participants != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Participants);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Racename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Racename);
      }
      if (Enginecapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Enginecapacity);
      }
      if (Participants != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Participants);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaceDTO other) {
      if (other == null) {
        return;
      }
      if (other.Racename.Length != 0) {
        Racename = other.Racename;
      }
      if (other.Enginecapacity != 0) {
        Enginecapacity = other.Enginecapacity;
      }
      if (other.Participants != 0) {
        Participants = other.Participants;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Racename = input.ReadString();
            break;
          }
          case 16: {
            Enginecapacity = input.ReadInt32();
            break;
          }
          case 24: {
            Participants = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParticipantDTO : pb::IMessage<ParticipantDTO> {
    private static readonly pb::MessageParser<ParticipantDTO> _parser = new pb::MessageParser<ParticipantDTO>(() => new ParticipantDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParticipantDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Protocol.MotoProtocolV3Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantDTO(ParticipantDTO other) : this() {
      firstname_ = other.firstname_;
      lastname_ = other.lastname_;
      enginecapacity_ = other.enginecapacity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantDTO Clone() {
      return new ParticipantDTO(this);
    }

    /// <summary>Field number for the "firstname" field.</summary>
    public const int FirstnameFieldNumber = 1;
    private string firstname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Firstname {
      get { return firstname_; }
      set {
        firstname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastname" field.</summary>
    public const int LastnameFieldNumber = 2;
    private string lastname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lastname {
      get { return lastname_; }
      set {
        lastname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enginecapacity" field.</summary>
    public const int EnginecapacityFieldNumber = 3;
    private int enginecapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Enginecapacity {
      get { return enginecapacity_; }
      set {
        enginecapacity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParticipantDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParticipantDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Firstname != other.Firstname) return false;
      if (Lastname != other.Lastname) return false;
      if (Enginecapacity != other.Enginecapacity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Firstname.Length != 0) hash ^= Firstname.GetHashCode();
      if (Lastname.Length != 0) hash ^= Lastname.GetHashCode();
      if (Enginecapacity != 0) hash ^= Enginecapacity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Firstname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firstname);
      }
      if (Lastname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Lastname);
      }
      if (Enginecapacity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Enginecapacity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Firstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firstname);
      }
      if (Lastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lastname);
      }
      if (Enginecapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Enginecapacity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParticipantDTO other) {
      if (other == null) {
        return;
      }
      if (other.Firstname.Length != 0) {
        Firstname = other.Firstname;
      }
      if (other.Lastname.Length != 0) {
        Lastname = other.Lastname;
      }
      if (other.Enginecapacity != 0) {
        Enginecapacity = other.Enginecapacity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Firstname = input.ReadString();
            break;
          }
          case 18: {
            Lastname = input.ReadString();
            break;
          }
          case 24: {
            Enginecapacity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MotoRequest : pb::IMessage<MotoRequest> {
    private static readonly pb::MessageParser<MotoRequest> _parser = new pb::MessageParser<MotoRequest>(() => new MotoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MotoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Protocol.MotoProtocolV3Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotoRequest(MotoRequest other) : this() {
      type_ = other.type_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User.Clone();
          break;
        case PayloadOneofCase.Teamname:
          Teamname = other.Teamname;
          break;
        case PayloadOneofCase.Enginecapacity:
          Enginecapacity = other.Enginecapacity;
          break;
        case PayloadOneofCase.Participant:
          Participant = other.Participant.Clone();
          break;
        case PayloadOneofCase.Entry:
          Entry = other.Entry.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotoRequest Clone() {
      return new MotoRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Chat.Protocol.MotoRequest.Types.Type type_ = global::Chat.Protocol.MotoRequest.Types.Type.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Protocol.MotoRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Protocol.User User {
      get { return payloadCase_ == PayloadOneofCase.User ? (global::Chat.Protocol.User) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.User;
      }
    }

    /// <summary>Field number for the "teamname" field.</summary>
    public const int TeamnameFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Teamname {
      get { return payloadCase_ == PayloadOneofCase.Teamname ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Teamname;
      }
    }

    /// <summary>Field number for the "enginecapacity" field.</summary>
    public const int EnginecapacityFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Enginecapacity {
      get { return payloadCase_ == PayloadOneofCase.Enginecapacity ? (int) payload_ : 0; }
      set {
        payload_ = value;
        payloadCase_ = PayloadOneofCase.Enginecapacity;
      }
    }

    /// <summary>Field number for the "participant" field.</summary>
    public const int ParticipantFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Protocol.Participant Participant {
      get { return payloadCase_ == PayloadOneofCase.Participant ? (global::Chat.Protocol.Participant) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Participant;
      }
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Protocol.Entry Entry {
      get { return payloadCase_ == PayloadOneofCase.Entry ? (global::Chat.Protocol.Entry) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Entry;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      User = 2,
      Teamname = 3,
      Enginecapacity = 4,
      Participant = 5,
      Entry = 6,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MotoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MotoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Teamname != other.Teamname) return false;
      if (Enginecapacity != other.Enginecapacity) return false;
      if (!object.Equals(Participant, other.Participant)) return false;
      if (!object.Equals(Entry, other.Entry)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Chat.Protocol.MotoRequest.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.User) hash ^= User.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Teamname) hash ^= Teamname.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Enginecapacity) hash ^= Enginecapacity.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Participant) hash ^= Participant.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Entry) hash ^= Entry.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Chat.Protocol.MotoRequest.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Teamname) {
        output.WriteRawTag(26);
        output.WriteString(Teamname);
      }
      if (payloadCase_ == PayloadOneofCase.Enginecapacity) {
        output.WriteRawTag(32);
        output.WriteInt32(Enginecapacity);
      }
      if (payloadCase_ == PayloadOneofCase.Participant) {
        output.WriteRawTag(42);
        output.WriteMessage(Participant);
      }
      if (payloadCase_ == PayloadOneofCase.Entry) {
        output.WriteRawTag(50);
        output.WriteMessage(Entry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Chat.Protocol.MotoRequest.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (payloadCase_ == PayloadOneofCase.Teamname) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Teamname);
      }
      if (payloadCase_ == PayloadOneofCase.Enginecapacity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Enginecapacity);
      }
      if (payloadCase_ == PayloadOneofCase.Participant) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Participant);
      }
      if (payloadCase_ == PayloadOneofCase.Entry) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MotoRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Chat.Protocol.MotoRequest.Types.Type.Unknown) {
        Type = other.Type;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          if (User == null) {
            User = new global::Chat.Protocol.User();
          }
          User.MergeFrom(other.User);
          break;
        case PayloadOneofCase.Teamname:
          Teamname = other.Teamname;
          break;
        case PayloadOneofCase.Enginecapacity:
          Enginecapacity = other.Enginecapacity;
          break;
        case PayloadOneofCase.Participant:
          if (Participant == null) {
            Participant = new global::Chat.Protocol.Participant();
          }
          Participant.MergeFrom(other.Participant);
          break;
        case PayloadOneofCase.Entry:
          if (Entry == null) {
            Entry = new global::Chat.Protocol.Entry();
          }
          Entry.MergeFrom(other.Entry);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Chat.Protocol.MotoRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Chat.Protocol.User subBuilder = new global::Chat.Protocol.User();
            if (payloadCase_ == PayloadOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            Teamname = input.ReadString();
            break;
          }
          case 32: {
            Enginecapacity = input.ReadInt32();
            break;
          }
          case 42: {
            global::Chat.Protocol.Participant subBuilder = new global::Chat.Protocol.Participant();
            if (payloadCase_ == PayloadOneofCase.Participant) {
              subBuilder.MergeFrom(Participant);
            }
            input.ReadMessage(subBuilder);
            Participant = subBuilder;
            break;
          }
          case 50: {
            global::Chat.Protocol.Entry subBuilder = new global::Chat.Protocol.Entry();
            if (payloadCase_ == PayloadOneofCase.Entry) {
              subBuilder.MergeFrom(Entry);
            }
            input.ReadMessage(subBuilder);
            Entry = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MotoRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Login")] Login = 1,
        [pbr::OriginalName("Logout")] Logout = 2,
        [pbr::OriginalName("GetRaceEntriesByEngineCapacity")] GetRaceEntriesByEngineCapacity = 3,
        [pbr::OriginalName("GetParticipantNameAndEngineCapacity")] GetParticipantNameAndEngineCapacity = 4,
        [pbr::OriginalName("GetAllTeamNames")] GetAllTeamNames = 5,
        [pbr::OriginalName("GetAllEngineCapacities")] GetAllEngineCapacities = 6,
        [pbr::OriginalName("FindRaceByEngineCapacity")] FindRaceByEngineCapacity = 7,
        [pbr::OriginalName("GetLastParticipant")] GetLastParticipant = 8,
        [pbr::OriginalName("AddParticipant")] AddParticipant = 9,
        [pbr::OriginalName("AddEntry")] AddEntry = 10,
      }

    }
    #endregion

  }

  public sealed partial class MotoResponse : pb::IMessage<MotoResponse> {
    private static readonly pb::MessageParser<MotoResponse> _parser = new pb::MessageParser<MotoResponse>(() => new MotoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MotoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Protocol.MotoProtocolV3Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotoResponse(MotoResponse other) : this() {
      type_ = other.type_;
      error_ = other.error_;
      races_ = other.races_.Clone();
      participants_ = other.participants_.Clone();
      teamnames_ = other.teamnames_.Clone();
      enginecapacities_ = other.enginecapacities_.Clone();
      race_ = other.race_ != null ? other.race_.Clone() : null;
      participant_ = other.participant_ != null ? other.participant_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotoResponse Clone() {
      return new MotoResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Chat.Protocol.MotoResponse.Types.Type type_ = global::Chat.Protocol.MotoResponse.Types.Type.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Protocol.MotoResponse.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "races" field.</summary>
    public const int RacesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Chat.Protocol.RaceDTO> _repeated_races_codec
        = pb::FieldCodec.ForMessage(26, global::Chat.Protocol.RaceDTO.Parser);
    private readonly pbc::RepeatedField<global::Chat.Protocol.RaceDTO> races_ = new pbc::RepeatedField<global::Chat.Protocol.RaceDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Chat.Protocol.RaceDTO> Races {
      get { return races_; }
    }

    /// <summary>Field number for the "participants" field.</summary>
    public const int ParticipantsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Chat.Protocol.ParticipantDTO> _repeated_participants_codec
        = pb::FieldCodec.ForMessage(34, global::Chat.Protocol.ParticipantDTO.Parser);
    private readonly pbc::RepeatedField<global::Chat.Protocol.ParticipantDTO> participants_ = new pbc::RepeatedField<global::Chat.Protocol.ParticipantDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Chat.Protocol.ParticipantDTO> Participants {
      get { return participants_; }
    }

    /// <summary>Field number for the "teamnames" field.</summary>
    public const int TeamnamesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_teamnames_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> teamnames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Teamnames {
      get { return teamnames_; }
    }

    /// <summary>Field number for the "enginecapacities" field.</summary>
    public const int EnginecapacitiesFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_enginecapacities_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> enginecapacities_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Enginecapacities {
      get { return enginecapacities_; }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 7;
    private global::Chat.Protocol.Race race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Protocol.Race Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "participant" field.</summary>
    public const int ParticipantFieldNumber = 8;
    private global::Chat.Protocol.Participant participant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Protocol.Participant Participant {
      get { return participant_; }
      set {
        participant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MotoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MotoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if(!races_.Equals(other.races_)) return false;
      if(!participants_.Equals(other.participants_)) return false;
      if(!teamnames_.Equals(other.teamnames_)) return false;
      if(!enginecapacities_.Equals(other.enginecapacities_)) return false;
      if (!object.Equals(Race, other.Race)) return false;
      if (!object.Equals(Participant, other.Participant)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Chat.Protocol.MotoResponse.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= races_.GetHashCode();
      hash ^= participants_.GetHashCode();
      hash ^= teamnames_.GetHashCode();
      hash ^= enginecapacities_.GetHashCode();
      if (race_ != null) hash ^= Race.GetHashCode();
      if (participant_ != null) hash ^= Participant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Chat.Protocol.MotoResponse.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      races_.WriteTo(output, _repeated_races_codec);
      participants_.WriteTo(output, _repeated_participants_codec);
      teamnames_.WriteTo(output, _repeated_teamnames_codec);
      enginecapacities_.WriteTo(output, _repeated_enginecapacities_codec);
      if (race_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Race);
      }
      if (participant_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Participant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Chat.Protocol.MotoResponse.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += races_.CalculateSize(_repeated_races_codec);
      size += participants_.CalculateSize(_repeated_participants_codec);
      size += teamnames_.CalculateSize(_repeated_teamnames_codec);
      size += enginecapacities_.CalculateSize(_repeated_enginecapacities_codec);
      if (race_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Race);
      }
      if (participant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Participant);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MotoResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Chat.Protocol.MotoResponse.Types.Type.Unknown) {
        Type = other.Type;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      races_.Add(other.races_);
      participants_.Add(other.participants_);
      teamnames_.Add(other.teamnames_);
      enginecapacities_.Add(other.enginecapacities_);
      if (other.race_ != null) {
        if (race_ == null) {
          Race = new global::Chat.Protocol.Race();
        }
        Race.MergeFrom(other.Race);
      }
      if (other.participant_ != null) {
        if (participant_ == null) {
          Participant = new global::Chat.Protocol.Participant();
        }
        Participant.MergeFrom(other.Participant);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Chat.Protocol.MotoResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            races_.AddEntriesFrom(input, _repeated_races_codec);
            break;
          }
          case 34: {
            participants_.AddEntriesFrom(input, _repeated_participants_codec);
            break;
          }
          case 42: {
            teamnames_.AddEntriesFrom(input, _repeated_teamnames_codec);
            break;
          }
          case 50:
          case 48: {
            enginecapacities_.AddEntriesFrom(input, _repeated_enginecapacities_codec);
            break;
          }
          case 58: {
            if (race_ == null) {
              Race = new global::Chat.Protocol.Race();
            }
            input.ReadMessage(Race);
            break;
          }
          case 66: {
            if (participant_ == null) {
              Participant = new global::Chat.Protocol.Participant();
            }
            input.ReadMessage(Participant);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MotoResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Ok")] Ok = 1,
        [pbr::OriginalName("Error")] Error = 2,
        [pbr::OriginalName("GetRaceEntriesByEngineCapacity")] GetRaceEntriesByEngineCapacity = 3,
        [pbr::OriginalName("GetParticipantNameAndEngineCapacity")] GetParticipantNameAndEngineCapacity = 4,
        [pbr::OriginalName("GetAllTeamNames")] GetAllTeamNames = 5,
        [pbr::OriginalName("GetAllEngineCapacities")] GetAllEngineCapacities = 6,
        [pbr::OriginalName("FindRaceByEngineCapacity")] FindRaceByEngineCapacity = 7,
        [pbr::OriginalName("GetLastParticipant")] GetLastParticipant = 8,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
